(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{145:function(t,e,s){t.exports=s.p+"assets/img/1.17b74b23.png"},151:function(t,e,s){"use strict";s.r(e);var n=s(0),i=Object(n.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("webpack.config.js")]),t._v(" "),t._m(7),n("p",[t._v("以上的写法是以下方法的简写方式")]),t._v(" "),t._m(8),t._m(9),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("本节学习课程demo下载\b文件夹为"),n("a",{attrs:{href:"https://github.com/494755899/Webpack-learning/tree/master/source",target:"_blank",rel:"noopener noreferrer"}},[t._v("lesson5"),n("OutboundLink")],1)])]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),n("p",[t._v("\bwebpack.config.js")]),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),n("img",{attrs:{src:s(145),alt:"alt text",title:"Title"}}),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("本节学习课程demo下载\b文件夹为"),n("a",{attrs:{href:"https://github.com/494755899/Webpack-learning/tree/master/source",target:"_blank",rel:"noopener noreferrer"}},[t._v("lesson6"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("通过图片可以证明通过数组的方把多个文件打入一个入口的时候，执行结果是从左到右打入的方式进行执行的。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),n("p",[t._v("可以通过对象的语法创建多个入口。")]),t._v(" "),n("p",[t._v("webpack.config.js")]),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("本节学习课程demo下载\b文件夹为"),n("a",{attrs:{href:"https://github.com/494755899/Webpack-learning/tree/master/source",target:"_blank",rel:"noopener noreferrer"}},[t._v("lesson7"),n("OutboundLink")],1)])]),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),n("p",[t._v("util.js")]),t._v(" "),t._m(34),n("p",[t._v("src/index1.js")]),t._v(" "),t._m(35),n("p",[t._v("src/index2.js")]),t._v(" "),t._m(36),t._m(37),t._v(" "),n("p",[t._v("webpack.config.js")]),t._v(" "),t._m(38),n("p",[t._v("运行webpack")]),t._v(" "),t._m(39),t._m(40),t._v(" "),n("p",[t._v("在一般情况下，对于工具包都会在主入口文件执行的时候之前就引入。这样就可以充分的利用缓存。当第一个页面加载完成后。第二个页面主要加载业务代码。而这些公用代码则可以利用缓存进行复用。不需要从服务端重新获取。")]),t._v(" "),t._m(41),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("本节学习课程demo下载\b文件夹为"),n("a",{attrs:{href:"https://github.com/494755899/Webpack-learning/tree/master/source",target:"_blank",rel:"noopener noreferrer"}},[t._v("lesson8"),n("OutboundLink")],1)])]),t._v(" "),t._m(42),t._v(" "),t._m(43)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"入口起点-entry-point"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#入口起点-entry-point","aria-hidden":"true"}},[this._v("#")]),this._v(" 入口起点(entry point)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在上一章概念中已经对"),e("code",[this._v("entry")]),this._v("配置有了初步的认识,同时"),e("code",[this._v("entry")]),this._v("在"),e("code",[this._v("webpack")]),this._v("存在多种方式去进行配置,如果对\b上一章\b概念认识阅读的,提到过可以配置多入口方案。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"前置基础工程目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前置基础工程目录","aria-hidden":"true"}},[this._v("#")]),this._v(" 前置基础工程目录")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(".webpackProject\n |--src\n |   |---index.js\n |--webapck.config.js\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"单文件单入口-单页面打包方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单文件单入口-单页面打包方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 单文件单入口,单页面打包方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("用法: "),e("code",[this._v("entry: string")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("简写语法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("module.exports = {\n    entry: './src/index.js'\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("module.exports = {\n    entry: {\n        main: './src/index.js'\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("运行"),e("code",[this._v("webpack")]),this._v("在当前目录下生成"),e("code",[this._v("dist")]),this._v("目录,并且生成"),e("code",[this._v("main.js")]),this._v("文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"多文件单入口-单页面打包方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多文件单入口-单页面打包方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 多文件单入口,单页面打包方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("用法: "),e("code",[this._v("entry: Array(string)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用"),e("code",[this._v("entry")]),this._v("选项创建一个入口的时候,不但可以使用字符串的方式,而且还可以通过数组的方式写入不同的文件路径,如果你想把多个依赖文件注入在一起时，通过数组的方式就可以灵活运用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("\bwebpackProject\n ├── src\n-|   |── index.js\n+|   ├── index1.js  写入 document.write('webpack learning 1')\n+|   ├── index2.js  写入 document.write('webpack learning 2')\n |———webpack.config.js\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果想把"),e("code",[this._v("index1.js")]),this._v("的文件中的代码和"),e("code",[this._v("index2.js")]),this._v("中的代码同时打包到一个入口中,用数组方式定义"),e("code",[this._v("entry")]),this._v("再合适不过了")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("module.exports = {\n    entry: ['./src/index1.js', './src/index2.js']\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("运行"),e("code",[this._v("webpack")]),this._v("命令。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("打包完成后在根目录下会生成"),s("code",[t._v("dist")]),t._v("目录,同时内部添加了一个"),s("code",[t._v("main.js")]),t._v("。"),s("code",[t._v("index1.js")]),t._v("和"),s("code",[t._v("index2.js")]),t._v("文件的执行\b代码会被顺序的打入。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("\bwebpackProject\n |── dist\n |   |--index.html\n |   |--main.js \n ├── src\n |   ├── index1.js  写入 document.write('webpack learning 1')\n |   ├── index2.js  写入 document.write('webpack learning 2')\n |-- webpack.config.js\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("在"),s("code",[t._v("dist")]),t._v("目录下创建"),s("code",[t._v("index.html")]),t._v(",写入基本的"),s("code",[t._v("html")]),t._v("结构。在底下通过"),s("code",[t._v("script")]),t._v("引下"),s("code",[t._v("main.js")]),t._v("文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在打包生成后的"),e("code",[this._v("dist")]),this._v("目录下创建"),e("code",[this._v("index.html")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n</head>\n<body>\n</body>\n<script src="./main.js"><\/script>\n</html>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在浏览打开"),e("code",[this._v("html")]),this._v("页面,可以发现在页面中写入了")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"多文件多入口-多页面打包方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多文件多入口-多页面打包方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 多文件多入口,多页面打包方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("用法： "),e("code",[this._v("entry: {[entryChunkName: string]: string|Array(string>)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("\bwebpackProject\n |── dist\n |   |--index1.html\n |   |--index2.html\n |   |--index1.js\n |   |--index2.js\n ├── src\n |   ├── index1.js  写入 document.write('webpack learning 1')\n |   ├── index2.js  写入 document.write('webpack learning 2')\n |-- webpack.config.js\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("module.exports = {\n    entry: {\n        index1: './src/index.js',\n        index2: './src/index2.js'\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("运行"),e("code",[this._v("webpack")]),this._v("命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("告诉"),e("code",[this._v("webpack")]),this._v("此时需要创建二个独立的模块(创建自己独立的依赖图)，分别需要引入到对应的"),e("code",[this._v("html")]),this._v("文件中,在"),e("code",[this._v("entry")]),this._v("中定义的属性则是最后打包生成后的包名。值则是对应路径文件中打包的代码。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("通过运行"),s("code",[t._v("webpack")]),t._v(",可以发现"),s("code",[t._v("dist")]),t._v("目录下生成了"),s("code",[t._v("index1.js")]),t._v("和"),s("code",[t._v("index2.js")]),t._v(",分别手动把这两个"),s("code",[t._v("js")]),t._v("引入到对应的"),s("code",[t._v("index1.html")]),t._v("和"),s("code",[t._v("index2.html")]),t._v("当中。打开页面发会生成对应的内容。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这只是一个简单生成两个页面的对应入口，如果有更多的页面，则需要借且一些其它插件和依赖包。进行自动创建入口和自动插入到"),e("code",[this._v("html")]),this._v("当中。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"多页面打包造成的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多页面打包造成的问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 多页面打包造成的问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("对于多入口的打包方式,必然会存在每个入口引用到同一个第三方包和公用函数。这种情况下每个入口都会打入同样的第三方的包和公用函数。可以利用"),e("code",[this._v("webapck4.x")]),this._v("的"),e("code",[this._v("optimization.splitChunks")]),this._v("在每个页面中创建共享代码,这样可以充分的利用缓存和减少代码的重复问题")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("\bwebpackProject\n |── dist\n |   |--index1.html\n |   |--index2.html\n |   |--index1.js\n |   |--index2.js\n ├── src\n+|   ├── util.js\n |   ├── index1.js\n |   ├── index2.js\n |-- webpack.config.js\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("export const a = 'webpack learning'\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("import { a } from './util.js\ndocument.write(a)\ndocument.write('file is index1')\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("import { a } from './util.js\ndocument.write(a)\ndocument.write('file is index2')\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("添加"),e("code",[this._v("mode")]),this._v("为"),e("code",[this._v("development")]),this._v("为了不让打包后的代码进行压缩，方便查看引入了那些代码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("module.exports = {\n   +mode: 'development', \n    entry: {\n        index1: './src/index.js',\n        index2: './src/index2.js'\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('/***/ "./src/util.js":\n/*!*********************!*\\\n  !*** ./src/util.js ***!\n  \\*********************/\n/*! exports provided: a */\n')])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("分别打开"),s("code",[t._v("dist")]),t._v("目录下"),s("code",[t._v("index1.js")]),t._v("和"),s("code",[t._v("index2.js")]),t._v("可以发现都会有这段代码。说明打包后了两个页面入口的js分别都打入了"),s("code",[t._v("./src/util.js")]),t._v("中导出的"),s("code",[t._v("a")]),t._v("变量")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("像以上情况，把所工具函数都打入入口文件，会导致文件包的过大。无法利用缓存提高加载性能。所以需要通过"),e("code",[this._v("optimization.splitChunks")]),this._v("选项进行代码分离提取。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"总结："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结：","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("创建单个入口可以通过字符串的写法。")]),this._v(" "),e("li",[this._v("通过多个入口创建一个入口通过数组的方式。")]),this._v(" "),e("li",[this._v("多页面创建，创建多个入口时，可以通过对象的方式，但是注意多入口的打包方式不做优化分离提取公共部分，会造成包的过大和不能利用浏览器缓存机制。")])])}],!1,null,null,null);i.options.__file="entry.md";e.default=i.exports}}]);